// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(STUDENT)
  major         String?
  year          Int?

  accounts      Account[]
  sessions      Session[]

  services      Service[]
  serviceReviews ServiceReview[]
  driver        Driver?
  ridesOffered  Ride[]    @relation("DriverRides")
  ridesRequested Ride[]   @relation("PassengerRides")
  productsSold  Product[] @relation("SellerProducts")
  productsBought Product[] @relation("BuyerProducts")
  studyGroups   StudyGroupMember[]
  assignments   Assignment[]
  eventsCreated Event[]   @relation("CreatorEvents")
  eventsAttended EventAttendee[]
  announcements Announcement[]
  chats         ChatParticipant[]
  messages      Message[]
  notifications Notification[]
  paymentsMade  Payment[] @relation("PayerPayments")
  paymentsReceived Payment[] @relation("ReceiverPayments")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Service {
  id          String    @id @default(cuid())
  providerId  String
  description String
  price       Float
  category    String

  provider    User      @relation(fields: [providerId], references: [id])
  reviews     ServiceReview[]
}

model ServiceReview {
  id        String   @id @default(cuid())
  serviceId String
  reviewerId String
  rating    Int
  comment   String
  reviewDate DateTime @default(now())

  service   Service  @relation(fields: [serviceId], references: [id])
  reviewer  User     @relation(fields: [reviewerId], references: [id])
}

model Driver {
  id            String @id @default(cuid())
  userId        String @unique
  licenseNumber String
  carModel      String
  carColor      String
  carCapacity   Int

  user          User   @relation(fields: [userId], references: [id])
  rides         Ride[]
}

model Ride {
  id            String   @id @default(cuid())
  driverId      String
  passengerId   String
  dateTime      DateTime
  startLocation String
  endLocation   String
  status        String

  driver        User     @relation("DriverRides", fields: [driverId], references: [id])
  passenger     User     @relation("PassengerRides", fields: [passengerId], references: [id])
}

model Product {
  id          String @id @default(cuid())
  sellerId    String
  buyerId     String?
  name        String
  description String
  price       Float
  category    String

  seller      User   @relation("SellerProducts", fields: [sellerId], references: [id])
  buyer       User?  @relation("BuyerProducts", fields: [buyerId], references: [id])
}

model StudyGroup {
  id        String @id @default(cuid())
  name      String
  courseCode String

  members    StudyGroupMember[]
  assignments Assignment[]
}

model StudyGroupMember {
  id           String @id @default(cuid())
  userId       String
  studyGroupId String

  user        User       @relation(fields: [userId], references: [id])
  studyGroup  StudyGroup @relation(fields: [studyGroupId], references: [id])

  @@unique([userId, studyGroupId])
}

model Assignment {
  id          String @id @default(cuid())
  groupId     String
  uploaderId  String
  title       String
  description String
  filePath    String
  uploadDate  DateTime @default(now())

  group       StudyGroup @relation(fields: [groupId], references: [id])
  uploader    User       @relation(fields: [uploaderId], references: [id])
}

model Event {
  id          String   @id @default(cuid())
  creatorId   String
  title       String
  description String
  dateTime    DateTime
  location    String

  creator     User     @relation("CreatorEvents", fields: [creatorId], references: [id])
  attendees   EventAttendee[]
}

model EventAttendee {
  id        String @id @default(cuid())
  userId    String
  eventId   String

  user      User   @relation(fields: [userId], references: [id])
  event     Event  @relation(fields: [eventId], references: [id])

  @@unique([userId, eventId])
}

model Announcement {
  id          String   @id @default(cuid())
  adminId     String
  title       String
  content     String
  publishDate DateTime @default(now())

  admin       User     @relation(fields: [adminId], references: [id])
}

model Chat {
  id       String @id @default(cuid())
  chatType String

  participants ChatParticipant[]
  messages     Message[]
}

model ChatParticipant {
  id     String @id @default(cuid())
  userId String
  chatId String

  user   User   @relation(fields: [userId], references: [id])
  chat   Chat   @relation(fields: [chatId], references: [id])

  @@unique([userId, chatId])
}

model Message {
  id        String   @id @default(cuid())
  chatId    String
  senderId  String
  content   String
  sendTime  DateTime @default(now())

  chat      Chat     @relation(fields: [chatId], references: [id])
  sender    User     @relation(fields: [senderId], references: [id])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  content   String
  type      String
  timestamp DateTime @default(now())
  isRead    Boolean  @default(false)

  user      User     @relation(fields: [userId], references: [id])
}

model Payment {
  id           String   @id @default(cuid())
  payerId      String
  receiverId   String
  amount       Float
  paymentType  String
  paymentDate  DateTime @default(now())
  status       String

  payer        User     @relation("PayerPayments", fields: [payerId], references: [id])
  receiver     User     @relation("ReceiverPayments", fields: [receiverId], references: [id])
}